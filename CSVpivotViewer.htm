<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>Pivot Table with Filters</title>
<script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
.label-row th {
  background-color: #e3f2fd;
  display: inline;
}
</style>
</head>
<body class="m-4">

<h2>Pivot Table with Filters</h2>

<div class="d-flex mb-2">
  <div class="me-4 align-self-start">
    <label>Filter 1:</label>
    <select id="filter1" class="form-select-sm"></select><br>
    <select id="filter1Value" multiple class="form-select-sm" size="5" style="min-width: 150px;"></select>
  </div>
  <div class="me-4 align-self-start">
    <label>Filter 2:</label>
    <select id="filter2" class="form-select-sm"></select><br>
    <select id="filter2Value" multiple class="form-select-sm" size="5" style="min-width: 150px;"></select>
  </div>
  <div class="me-4 align-self-start">
    <label>Filter 3:</label>
    <select id="filter3" class="form-select-sm"></select><br>
    <select id="filter3Value" multiple class="form-select-sm" size="5" style="min-width: 150px;"></select>
  </div>
  <div class="me-4 align-self-start">
    <label>Filter 4:</label>
    <select id="filter4" class="form-select-sm"></select><br>
    <select id="filter4Value" multiple class="form-select-sm" size="5" style="min-width: 150px;"></select>
  </div>
  <div class="me-4 align-self-start">
    <label>Row:</label>
    <select id="row1" class="form-select-sm"></select><br>
    <select id="row2" class="form-select-sm"></select>
  </div>
  <div class="me-4 align-self-start">
    <label>Column:</label>
    <select id="col1" class="form-select-sm"></select><br>
    <select id="col2" class="form-select-sm"></select>
  </div>
  <div class="align-self-start">
    <label>Chart:</label><br>
    <button class="btn btn-sm btn-primary" onclick="drawChart()">Draw</button>
  </div>
</div>

<table id="pivotTable" class="table table-sm table-bordered"></table>

<canvas id="chart" width="800" height="400"></canvas>

<script>
let data = [];
let pivot = {};

function loadCSV(csv) {
  Papa.parse(csv, {
    header: true,
    skipEmptyLines: true,
    complete: function(results) {
      data = results.data;
      fillSelects();
      renderTable();
    }
  });
}

function fillSelects() {
  const keys = Object.keys(data[0]);
  for (let id of ['filter1', 'filter2', 'filter3', 'filter4', 'row1', 'row2', 'col1', 'col2']) {
    const sel = document.getElementById(id);
    sel.innerHTML = '<option value=""></option>' + keys.map(k => `<option value="${k}">${k}</option>`).join('');
  }
}

function getSelectedValues(id) {
  return Array.from(document.getElementById(id).selectedOptions).map(o => o.value);
}

function updateFilterValues(filterId) {
  const valId = filterId + 'Value';
  const col = document.getElementById(filterId).value;
  const sel = document.getElementById(valId);
  if (!col) {
    sel.innerHTML = '';
    return;
  }
  const unique = [...new Set(data.map(d => d[col]))].sort();
  sel.innerHTML = unique.map(v => `<option value="${v}">${v}</option>`).join('');
}

document.getElementById('filter1').addEventListener('change', () => updateFilterValues('filter1'));
document.getElementById('filter2').addEventListener('change', () => updateFilterValues('filter2'));
document.getElementById('filter3').addEventListener('change', () => updateFilterValues('filter3'));
document.getElementById('filter4').addEventListener('change', () => updateFilterValues('filter4'));

function renderTable() {
  const f1 = document.getElementById('filter1').value;
  const f1vList = getSelectedValues('filter1Value');
  const f2 = document.getElementById('filter2').value;
  const f2vList = getSelectedValues('filter2Value');
  const f3 = document.getElementById('filter3').value;
  const f3vList = getSelectedValues('filter3Value');
  const f4 = document.getElementById('filter4').value;
  const f4vList = getSelectedValues('filter4Value');
  const r1 = document.getElementById('row1').value;
  const r2 = document.getElementById('row2').value;
  const c1 = document.getElementById('col1').value;
  const c2 = document.getElementById('col2').value;

  pivot = {};

  for (let d of data) {
    let ok = true;
    if (f1 && f1vList.length > 0) ok = ok && f1vList.includes(String(d[f1]));
    if (f2 && f2vList.length > 0) ok = ok && f2vList.includes(String(d[f2]));
    if (f3 && f3vList.length > 0) ok = ok && f3vList.includes(String(d[f3]));
    if (f4 && f4vList.length > 0) ok = ok && f4vList.includes(String(d[f4]));
    if (!ok) continue;

    const rowKey = (r1 ? d[r1] : '') + (r2 ? '|' + d[r2] : '');
    const colKey = (c1 ? d[c1] : '') + (c2 ? '|' + d[c2] : '');

    if (!pivot[rowKey]) pivot[rowKey] = {};
    pivot[rowKey][colKey] = (pivot[rowKey][colKey] || 0) + 1;
  }

  const table = document.getElementById('pivotTable');
  table.innerHTML = '';

  const headerRow = table.insertRow();
  headerRow.className = 'label-row';
  headerRow.insertCell();
  const colKeys = [...new Set(Object.values(pivot).flatMap(r => Object.keys(r)))].sort();
  for (let k of colKeys) {
    const th = document.createElement('th');
    th.textContent = k;
    headerRow.appendChild(th);
  }

  for (let rk of Object.keys(pivot).sort()) {
    const tr = table.insertRow();
    const th = document.createElement('th');
    th.textContent = rk;
    tr.appendChild(th);
    for (let ck of colKeys) {
      const td = tr.insertCell();
      td.textContent = pivot[rk][ck] || '';
    }
  }
}

for (let id of ['filter1Value', 'filter2Value', 'filter3Value', 'filter4Value', 'row1', 'row2', 'col1', 'col2']) {
  document.getElementById(id).addEventListener('change', renderTable);
}

function drawChart() {
  const ctx = document.getElementById('chart').getContext('2d');
  if (window.myChart) window.myChart.destroy();
  const labels = [...new Set(Object.values(pivot).flatMap(r => Object.keys(r)))].sort();
  const datasets = [];

  for (let [rk, row] of Object.entries(pivot)) {
    const data = labels.map(l => row[l] || 0);
    datasets.push({ label: rk, data, backgroundColor: randomColor() });
  }

  window.myChart = new Chart(ctx, {
    type: 'bar',
    data: { labels, datasets },
    options: {
      plugins: {
        legend: { display: true },
        datalabels: {
          anchor: 'end',
          align: 'top',
          formatter: Math.round
        }
      },
      responsive: true,
      scales: {
        x: { stacked: true },
        y: { stacked: true, beginAtZero: true }
      }
    },
    plugins: [ChartDataLabels]
  });
}

function randomColor() {
  return `hsl(${Math.random() * 360},70%,70%)`;
}

// ここに初期CSVデータを入れると、すぐ動きます（必要なら言ってくださいね！）
</script>

</body>
</html>
